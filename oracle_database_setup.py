import re
import pandas as pd
import cx_Oracle
import os

# Step 1: Set TNS_ADMIN Environment Variable
wallet_location = r"C:\Users\mekhi\Downloads\Wallet_mekhiAveryDb1"
os.environ['TNS_ADMIN'] = wallet_location

# Step 2: Load the Text File
file_path = 'C:/Users/mekhi/Downloads/pg30155.txt'
with open(file_path, 'r', encoding='utf-8') as file:
    text = file.read()

# Step 3: Extract Sections Using Regex
publication_details_pattern = r'(?s)(Project Gutenberg\'s .*?)(?=Table of Contents)'
table_of_contents_pattern = r'(?s)(Table of Contents.*?)(?=Preface)'
preface_pattern = r'(?s)(Preface.*?)(?=On the Electrodynamics of Moving Bodies)'
chapter_pattern = r'(?s)(On the Electrodynamics of Moving Bodies.*?)(?=Appendix:|End of Project Gutenberg\'s Relativity)'

publication_details_match = re.search(publication_details_pattern, text)
table_of_contents_match = re.search(table_of_contents_pattern, text)
preface_match = re.search(preface_pattern, text)
chapters_matches = re.findall(chapter_pattern, text)

publication_details = publication_details_match.group(1).strip() if publication_details_match else None
table_of_contents = table_of_contents_match.group(1).strip() if table_of_contents_match else None
preface = preface_match.group(1).strip() if preface_match else None

data = {
    'Publication Details': [publication_details],
    'Table of Contents': [table_of_contents],
    'Preface': [preface]
}

for i, chapter in enumerate(chapters_matches, start=1):
    data[f'Chapter {i}'] = [chapter.strip()]

df = pd.DataFrame(data)

# Step 4: Write DataFrame to Database
user = "Admin"
password = "Mekhiavery2004"
dsn = "mekhiaverydb1_high"

connection = cx_Oracle.connect(
    user=user,
    password=password,
    dsn=dsn,
    encoding="UTF-8"
)

cursor = connection.cursor()

create_literature_table = """
CREATE TABLE literature (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    publication_details CLOB,
    table_of_contents CLOB,
    preface CLOB,
    chapter_1 CLOB,
    chapter_2 CLOB,
    chapter_3 CLOB,
    chapter_4 CLOB
)
"""

try:
    cursor.execute(create_literature_table)
    connection.commit()
    print("Table 'literature' created successfully.")
except cx_Oracle.DatabaseError as e:
    error, = e.args
    print("Error creating table:")
    print(error.message)

insert_sql = """
INSERT INTO literature (publication_details, table_of_contents, preface, chapter_1, chapter_2, chapter_3, chapter_4)
VALUES (:1, :2, :3, :4, :5, :6, :7)
"""

try:
    cursor.execute(insert_sql, (
        df.at[0, 'Publication Details'],
        df.at[0, 'Table of Contents'],
        df.at[0, 'Preface'],
        df.at[0, 'Chapter 1'] if 'Chapter 1' in df.columns else None,
        df.at[0, 'Chapter 2'] if 'Chapter 2' in df.columns else None,
        df.at[0, 'Chapter 3'] if 'Chapter 3' in df.columns else None,
        df.at[0, 'Chapter 4'] if 'Chapter 4' in df.columns else None
    ))
    connection.commit()
    print("Data inserted successfully.")
except cx_Oracle.DatabaseError as e:
    error, = e.args
    print("Error inserting data:")
    print(error.message)
finally:
    cursor.close()
    connection.close()
